# Import packages
using Revise
using AdaptiveCBFToolbox
using LinearAlgebra
using Plots
using LaTeXStrings
default(fontfamily="Computer Modern", grid=false, framestyle=:box, lw=2, label="")

# Define system: planar double integrator
n = 4
m = 2
f(x) = vcat(x[3:4], zeros(2))
g(x) = vcat(zeros(2,2), diagm(ones(2)))
Œ£ = ControlAffineSystem(n, m, f, g)

# Define uncertain parameters: friction coefficients
Œº1 = 1.0
Œº2 = 1.0
Œ∏ = [Œº1, Œº2]

# Bounds on each parameter
Œº1bounds = [0.0, 3.0]
Œº2bounds = [0.0, 3.0]
ùöØ = [Œº1bounds, Œº2bounds]

# Define the regressor function and construct a MatchedParameters object
œÜ(x) = -diagm(x[3:4])
P = MatchedParameters(Œ∏, œÜ, ùöØ)

# Define a CLF and an adaptive CLF-QP controller for reaching the origin
Q = [2.0 0.0 1.0 0.0; 0.0 2.0 0.0 1.0; 1.0 0.0 1.0 0.0; 0.0 1.0 0.0 1.0]
V(x) = x'Q*x
Œ≥(x) = V(x)
CLF = ControlLyapunovFunction(V, Œ≥)
k0 = ACLFQuadProg(Œ£, P, CLF)

# Define update law associated with CLF
Œì = 1.0
œÑCLF = CLFUpdateLaw(Œì, P, Œ£, CLF)

# Define an ICL history stack and update law
Œìc = 10.0
M = 20
dt = 0.01
Œît = 0.5
H = ICLHistoryStack(M, Œ£, P)
œÑ = ICLGradientUpdateLaw(Œìc, dt, Œît, H)

# Define safety constraints for two obstacles
xo1 = [-1.75, 2.0]
xo2 = [-1.0, 0.5]
ro1 = 0.5
ro2 = 0.5
h1(x) = norm(x[1:2] - xo1)^2 - ro1^2
h2(x) = norm(x[1:2] - xo2)^2 - ro2^2

# Construct HOCBFs for each obstacle and HO-RaCBF QP
Œ±1(s) = s
Œ±2(s) = s
HOCBF1 = SecondOrderCBF(Œ£, h1, Œ±1, Œ±2)
HOCBF2 = SecondOrderCBF(Œ£, h2, Œ±1, Œ±2)
HOCBFs = [HOCBF1, HOCBF2]
k = RACBFQuadProg(Œ£, P, k0, HOCBFs)

# Initial conditions
x0 = [-2.5, 2.5, 0.0, 0.0]
Œ∏ÃÇ0 = zeros(length(Œ∏))

# Simulate
T = 20.0
S = Simulation(T)
sol = S(Œ£, P, k, œÑCLF, œÑ, x0, Œ∏ÃÇ0)

# Plot system states
begin
    fig = plot(sol, idxs=1:Œ£.n, label="")
    xlabel!(L"t")
    ylabel!(L"x(t)")
    display(fig)
end

# Plot evolution of system's configuration
begin
    fig = plot(sol, idxs=(1,2), label="", dpi=200)
    plot_circle!(xo1[1], xo1[2], ro1)
    plot_circle!(xo2[1], xo2[2], ro2)
    xlabel!(L"x_1")
    ylabel!(L"x_2")
    display(fig)
    # savefig(fig, "dbl_int_traj.png")
end

# Plot trajectory of parameter estimates
begin
    fig = plot(sol, idxs = Œ£.n + 1 : Œ£.n + P.p, label=[L"\hat{\theta}_1^h" L"\hat{\theta}_2^h"], dpi=200)
    plot!(sol, idxs = Œ£.n + P.p + 1 : Œ£.n + 2*P.p, label=[L"\hat{\theta}_1^V" L"\hat{\theta}_2^V"])
    hline!(Œ∏, c=:black, ls=:dot)
    xlabel!(L"t")
    ylabel!(L"\hat{\theta}(t)")
    display(fig)
    # savefig(fig, "dbl_int_params.png")
end

# Plot trajectory of estimation error
Œ∏ÃÇ(t) = sol(t, idxs = Œ£.n + 1 : Œ£.n + P.p)
Œ∏ÃÉ(t) = norm(Œ∏ - Œ∏ÃÇ(t))
tspan = 0.0:dt:T
begin
    fig = plot(sol, idxs = Œ£.n + 2*P.p + 1, label=L"\tilde{\vartheta}(t)")
    plot!(tspan, Œ∏ÃÉ.(tspan), label=L"||\tilde{\theta}(t)||")
    xlabel!(L"t")
    ylabel!("Estimation error")
    display(fig)
end